/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  customerEmail?: string;
  customerName?: string;
  orderDate?: string;
  status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled" | "refunded";
  items?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    quantity?: number;
    price?: number;
    _key: string;
  }>;
  shippingAddress?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "address";
  };
  billingAddress?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "address";
  };
  subtotal?: number;
  tax?: number;
  shipping?: number;
  total?: number;
  paymentMethod?: "credit_card" | "paypal" | "stripe" | "cod";
  trackingNumber?: string;
  notes?: string;
};

export type Address = {
  _id: string;
  _type: "address";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  email?: string;
  name?: string;
  streetAddress?: string;
  apartment?: string;
  city?: string;
  state?: string;
  postalCode?: string;
  country?: string;
  phone?: string;
  isDefault?: boolean;
};

export type Banner = {
  _id: string;
  _type: "banner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  link?: string;
  slug?: Slug;
  badge?: string;
  discountAmount?: number;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  imageUrl?: string;
  isMiniBanner?: boolean;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  originalPrice?: number;
  discount?: number;
  sku?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    alt?: string;
    _type: "imageUrl";
    _key: string;
  }>;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  brand?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "brand";
  };
  stock?: number;
  status?: "Hot" | "New" | "Sale" | "Ending" | "Last Piece" | "Out of Stock";
  variant?: string;
  featured?: boolean;
  customAttributes?: Array<{
    name?: string;
    value?: string;
    _type: "customAttribute";
    _key: string;
  }>;
  tags?: Array<string>;
};

export type Brand = {
  _id: string;
  _type: "brand";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  logoUrl?: string;
  description?: string;
  website?: string;
  featured?: boolean;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  imageUrl?: string;
  parent?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  featured?: boolean;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Order | Address | Banner | Product | Brand | Category | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/query.ts
// Variable: BANNER_QUERY
// Query: *[_type == "banner" && (isMiniBanner != true)] {  _id,  name,  description,  link,  slug,  badge,  discountAmount,  image,  imageUrl,  isMiniBanner} | order(_createdAt desc)
export type BANNER_QUERYResult = Array<{
  _id: string;
  name: string | null;
  description: string | null;
  link: string | null;
  slug: Slug | null;
  badge: string | null;
  discountAmount: number | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  imageUrl: string | null;
  isMiniBanner: boolean | null;
}>;
// Variable: MINI_BANNER_QUERY
// Query: *[_type == "banner" && isMiniBanner == true] {  _id,  name,  description,  link,  slug,  badge,  discountAmount,  image,  imageUrl,  isMiniBanner} | order(_createdAt desc)
export type MINI_BANNER_QUERYResult = Array<{
  _id: string;
  name: string | null;
  description: string | null;
  link: string | null;
  slug: Slug | null;
  badge: string | null;
  discountAmount: number | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  imageUrl: string | null;
  isMiniBanner: boolean | null;
}>;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"] {  _id,  name,  slug,  image,  imageUrl,  description} | order(_createdAt desc)
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  imageUrl: string | null;
  description: string | null;
}>;
// Variable: FEATURED_PRODUTS
// Query: *[_type == "product" && featured == true] {  _id,  name,  slug,  description,  images,  originalPrice,  discount,  sku,  stock,  status,  variant,  category->{    _id,    name,    slug  },  brand->{    _id,    name,    slug  },  featured,  tags} | order(_createdAt desc)
export type FEATURED_PRODUTSResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  description: string | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    alt?: string;
    _type: "imageUrl";
    _key: string;
  }> | null;
  originalPrice: number | null;
  discount: number | null;
  sku: string | null;
  stock: number | null;
  status: "Ending" | "Hot" | "Last Piece" | "New" | "Out of Stock" | "Sale" | null;
  variant: string | null;
  category: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  brand: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  featured: boolean | null;
  tags: Array<string> | null;
}>;
// Variable: BRANDS
// Query: *[_type == "brand"] {  _id,  name,  slug,  logo,  logoUrl,  description} | order(_createdAt desc)
export type BRANDSResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  logoUrl: string | null;
  description: string | null;
}>;
// Variable: PRODUCT_BY_SLUG
// Query: *[_type == "product" && slug.current == $slug][0] {  _id,  name,  slug,  description,  images,  originalPrice,  discount,  sku,  stock,  status,  variant,  category->{    _id,    name,    slug  },  brand->{    _id,    name,    slug  },  featured,  tags}
export type PRODUCT_BY_SLUGResult = {
  _id: string;
  name: string | null;
  slug: Slug | null;
  description: string | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    alt?: string;
    _type: "imageUrl";
    _key: string;
  }> | null;
  originalPrice: number | null;
  discount: number | null;
  sku: string | null;
  stock: number | null;
  status: "Ending" | "Hot" | "Last Piece" | "New" | "Out of Stock" | "Sale" | null;
  variant: string | null;
  category: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  brand: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  featured: boolean | null;
  tags: Array<string> | null;
} | null;
// Variable: ALL_PRODUCTS_DEBUG
// Query: *[_type == "product"] {  _id,  name,  slug}
export type ALL_PRODUCTS_DEBUGResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
}>;
// Variable: SEARCH_PRODUCTS
// Query: *[_type == "product" && (name match $searchTerm || slug.current match $searchTerm)] {  _id,  name,  slug,  description,  images,  originalPrice,  discount,  sku,  stock,  status,  variant,  category->{    _id,    name,    slug  },  brand->{    _id,    name,    slug  },  featured,  tags} | order(_createdAt desc)[0...10]
export type SEARCH_PRODUCTSResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  description: string | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    alt?: string;
    _type: "imageUrl";
    _key: string;
  }> | null;
  originalPrice: number | null;
  discount: number | null;
  sku: string | null;
  stock: number | null;
  status: "Ending" | "Hot" | "Last Piece" | "New" | "Out of Stock" | "Sale" | null;
  variant: string | null;
  category: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  brand: {
    _id: string;
    name: string | null;
    slug: Slug | null;
  } | null;
  featured: boolean | null;
  tags: Array<string> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"banner\" && (isMiniBanner != true)] {\n  _id,\n  name,\n  description,\n  link,\n  slug,\n  badge,\n  discountAmount,\n  image,\n  imageUrl,\n  isMiniBanner\n} | order(_createdAt desc)": BANNER_QUERYResult;
    "*[_type == \"banner\" && isMiniBanner == true] {\n  _id,\n  name,\n  description,\n  link,\n  slug,\n  badge,\n  discountAmount,\n  image,\n  imageUrl,\n  isMiniBanner\n} | order(_createdAt desc)": MINI_BANNER_QUERYResult;
    "*[_type == \"category\"] {\n  _id,\n  name,\n  slug,\n  image,\n  imageUrl,\n  description\n} | order(_createdAt desc)": CATEGORIES_QUERYResult;
    "*[_type == \"product\" && featured == true] {\n  _id,\n  name,\n  slug,\n  description,\n  images,\n  originalPrice,\n  discount,\n  sku,\n  stock,\n  status,\n  variant,\n  category->{\n    _id,\n    name,\n    slug\n  },\n  brand->{\n    _id,\n    name,\n    slug\n  },\n  featured,\n  tags\n} | order(_createdAt desc)": FEATURED_PRODUTSResult;
    "*[_type == \"brand\"] {\n  _id,\n  name,\n  slug,\n  logo,\n  logoUrl,\n  description\n} | order(_createdAt desc)": BRANDSResult;
    "*[_type == \"product\" && slug.current == $slug][0] {\n  _id,\n  name,\n  slug,\n  description,\n  images,\n  originalPrice,\n  discount,\n  sku,\n  stock,\n  status,\n  variant,\n  category->{\n    _id,\n    name,\n    slug\n  },\n  brand->{\n    _id,\n    name,\n    slug\n  },\n  featured,\n  tags\n}": PRODUCT_BY_SLUGResult;
    "*[_type == \"product\"] {\n  _id,\n  name,\n  slug\n}": ALL_PRODUCTS_DEBUGResult;
    "*[_type == \"product\" && (name match $searchTerm || slug.current match $searchTerm)] {\n  _id,\n  name,\n  slug,\n  description,\n  images,\n  originalPrice,\n  discount,\n  sku,\n  stock,\n  status,\n  variant,\n  category->{\n    _id,\n    name,\n    slug\n  },\n  brand->{\n    _id,\n    name,\n    slug\n  },\n  featured,\n  tags\n} | order(_createdAt desc)[0...10]": SEARCH_PRODUCTSResult;
  }
}
